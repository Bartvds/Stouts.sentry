---
# vim:sw=2:ft=ansible
- name: Ensure sentry user exists
  user: name={{sentry_user}}

- name: Ensure sentry directories exists
  file: state=directory path={{sentry_home}} owner={{sentry_user}}

- name: Install Dependencies
  apt: name={{item}}
  with_items: [libxml2-dev, libxslt1-dev, zlib1g-dev, libffi-dev]

# Try to create virtualenv only if it doesn't exist.
# This way we can re-run the playbook without errors.
- name: Check existince of created virtualenv
  stat: path={{sentry_home}}/env
  register: sentry_has_virtualenv
  sudo: yes
  sudo_user: "{{sentry_user}}"

- name: Create virtualenv for Sentry using chosen Python
  when: sentry_has_virtualenv.stat.exists == False
  shell: virtualenv --python={{sentry_python}} {{sentry_home}}/env
  sudo: yes
  sudo_user: "{{sentry_user}}"

- name: Install Sentry
  pip: name=sentry executable={{sentry_home}}/env/bin/pip version={{sentry_version}}  virtualenv="{{sentry_home}}"/env
  sudo: yes
  sudo_user: "{{sentry_user}}"

- name: Install requirements for Redis
  pip: name={{item}} executable={{sentry_home}}/env/bin/pip
  with_items:
    - redis
    - hiredis
    - nydus
    - django-redis-cache
  sudo: yes
  sudo_user: "{{sentry_user}}"
  when: redis_enabled

- name: Install requirements for MySQL
  pip: name=mysql-python executable={{ sentry_home }}/env/bin/pip
  when: "'mysql' in sentry_db_engine|lower()"

- name: Install requirements for Postgresql
  pip: name=psycopg2 executable={{ sentry_home }}/env/bin/pip
  when: "'psycopg2' in sentry_db_engine|lower()"

- name: Install extensions
  pip: name={{item}} executable={{sentry_home}}/env/bin/pip
  with_items: sentry_extensions

- name: Prepare Sentry
  template: src=sentry.j2 dest={{sentry_home}}/sentry owner={{sentry_user}} mode=0755

- name: Configure Upstart
  template: src={{item}}.conf.j2 dest=/etc/init/{{item}}.conf
  with_items:
    - sentry-web
    - sentry-worker
  notify:
    - sentry reload

- name: Configure Sentry
  template: src=config.py.j2 dest={{sentry_home}}/config.py owner={{sentry_user}}
  register: config
  notify: [sentry restart]

- file: state=directory path={{sentry_home}} owner={{sentry_user}} recurse=yes

- name: Upgrade sentry
  shell: "{{sentry_home}}/sentry upgrade"
  when: config.changed
  sudo: yes
  sudo_user: "{{sentry_user}}"

- name: Setup initial data
  template: src=setup.py.j2 dest={{sentry_home}}/setup.py owner={{sentry_user}} mode=0755
  register: setup

- shell: env/bin/python setup.py
    chdir={{sentry_home}}
  when: setup.changed
  sudo: yes
  sudo_user: "{{sentry_user}}"

- name: Configure Nginx
  template: src=nginx.conf.j2 dest={{nginx_dir|default('/etc/nginx')}}/sites-available/sentry.conf
  notify: [nginx reload]
  when: nginx_enabled

- name: Enable Nginx site
  file: src={{nginx_dir|default('/etc/nginx')}}/sites-available/sentry.conf dest={{nginx_dir|default('/etc/nginx')}}/sites-enabled/sentry.conf state=link
  when: nginx_enabled

- name: Ensure Sentry is started
  service: name={{item}} state=started
  with_items:
  - sentry-web
  - sentry-worker
