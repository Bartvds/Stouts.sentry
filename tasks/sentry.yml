---
# vim:sw=2:ft=ansible
- name: Ensure sentry user exists
  user: name={{sentry_user}}

- name: Ensure sentry home exists
  file: state=directory path={{item}} owner={{sentry_user}}
  with_items:
    - "{{sentry_home}}"
    - "{{sentry_home}}/log"

- name: Setup virtualenv
  shell: virtualenv {{sentry_home}}/env creates={{sentry_home}}/env/bin/pip
  sudo: yes
  sudo_user: "{{sentry_user}}"

- name: Install Sentry
  pip: name=sentry executable={{sentry_home}}/env/bin/pip
  sudo: yes
  sudo_user: "{{sentry_user}}"

- name: Install requirements
  pip: name={{item}} executable={{sentry_home}}/env/bin/pip
  with_items:
    - redis
    - hiredis
    - nydus
    - django-redis-cache
  sudo: yes
  sudo_user: "{{sentry_user}}"

- name: Install extensions
  pip: name={{item}} executable={{sentry_home}}/env/bin/pip
  with_items: sentry_extensions

- name: Prepare Sentry
  template: src=sentry.j2 dest={{sentry_home}}/sentry owner={{sentry_user}} mode=0755

- name: Configure Upstart
  template: src={{item}}.conf.j2 dest=/etc/init/{{item}}.conf
  with_items:
    - sentry-web
    - sentry-worker
  notify:
    - sentry reload

- name: Configure Sentry
  template: src=config.py.j2 dest={{sentry_home}}/config.py owner={{sentry_user}}
  register: config
  notify:
    - sentry restart

- file: state=directory path={{sentry_home}} owner={{sentry_user}} recurse=yes

- name: Upgrade sentry
  shell: "{{sentry_home}}/sentry upgrade >> {{sentry_home}}/logs/sentry.log"
  when: config.changed
  sudo: yes
  sudo_user: "{{sentry_user}}"

- name: Setup initial data
  template: src=setup.py.j2 dest={{sentry_home}}/setup.py owner={{sentry_user}} mode=0755
  register: setup

- shell: venv/bin/python setup.py
    chdir={{sentry_home}}
  when: setup.changed
  sudo: yes
  sudo_user: "{{sentry_user}}"

- name: Configure Nginx
  template: src=nginx.conf.j2 dest={{nginx_sites_dir}}/sentry.conf
  notify:
    - nginx reload
